using Godot;
using Soteria;
using Soteria.Network;
using Soteria.Foundation.Contracts;
using System;
using System.Collections.Generic;

namespace Soteria.Network.Threats {
    public class Malware : Node, IThreat
    {

        private GameVariables gameVariables;
        private NetworkGraph networkGraph;
        private List<INetworkNode> infectedNodes;

        [Export(PropertyHint.Range, "0,14,1,or_greater")]
        public readonly int DaysBetweenInfections;
        private int dayCounter;

        [Export]
        public NodePath NodeToInfect;

        private INetworkNode nodeToInfect;

        public override void _Ready()
        {
            this.gameVariables = this.GetNode<GameVariables>("/root/GameVariables");
            this.networkGraph = this.GetNode<NetworkGraph>("..");
            this.infectedNodes = new List<INetworkNode>();

            this.nodeToInfect = (INetworkNode)this.GetNode(NodeToInfect);

            this.networkGraph.NetworkTick += this.OnNetworkTick;

            this.dayCounter = DaysBetweenInfections;
        }

        public void OnNetworkTick(object sender, EventArgs e)
        {

            if (this.dayCounter < 0)
            {
                this.dayCounter = DaysBetweenInfections;
                this.Spread();
            } else {
                this.dayCounter -= 1;
            }
        }

        private void Spread()
        {
            if(!this.infectedNodes.Contains(this.nodeToInfect) && this.nodeToInfect.AttemptInfection(this))
            {
                this.infectedNodes.Add(this.nodeToInfect);
                return;
            }
            var targets = new List<INetworkNode>(this.infectedNodes);

            foreach (var infectedNode in targets)
            {
                foreach (var connection in infectedNode.Connections)
                {
                    if (!connection.Target.Infections.Contains(this) && connection.Target.AttemptInfection(this))
                    {
                        this.infectedNodes.Add(connection.Target);
                    }
                }
            }
        }

        public void RemoveNode(INetworkNode node)
        {
            this.infectedNodes.Remove(node);
        }
    }
}
